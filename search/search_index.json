{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started What is 3DN BIP? 3DN BIP or 3D Ninjas Blender Image Preview is a library, which allows blazingly fast image loads in Blender. It operates as a bpy.utils.previews drop-in replacement and does all the heavy lifting for you. Our library supports the following major use cases: Load images shipped as BIP images. We recommend this approach in case you can generate the images beforehand. In this case, your users don't need to take any action to enjoy the speed boost. Load regular JPEG or PNG images. Recommended in case you need to load images provided by the user or by external software tools. In this case, you should use our prepared InstallPillow operator so that your users can enjoy the speed boost with a simple click. Notes: Our library will always fall back to bpy.utils.previews if unsupported formats are to be loaded. For this reason, there is no disadvantage in using this library. In the worst case, we will apply the standard mechanism of Blender. .bip is a highly optimized image format, which can be transferred to Blender's internal data structures immediately. It is always blazingly fast, whether Pillow is installed or not. Examples Download the following sample addons. You can easily install the ZIP files in Blender via the addon preferences tab. Getting Started: t3dn_bip_getting_started.zip Showcase: t3dn_bip_showcase.zip Library The latest release of the library can be downloaded here: t3dn_bip.zip Just extract the zip file and copy the folder into your addon. Take a closer look at the examples given above to learn how to use the library. In case you want to install the library via PyPI , you can use the following command: python -m pip install t3dn-bip Converter The converter is provided via PyPI . Use the following command for the installation: python -m pip install t3dn-bip-converter Use the following command to convert images of various formats into the BIP format: python -m t3dn_bip_converter source_file.png destination_file.bip Showcases Show .bip and .jpg Images in a Panel Show .bip and .jpg Images in an Enum Show large .bip and .jpg Hero Images in a Panel Show .bip and .png Images with an Alpha Channel","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#what-is-3dn-bip","text":"3DN BIP or 3D Ninjas Blender Image Preview is a library, which allows blazingly fast image loads in Blender. It operates as a bpy.utils.previews drop-in replacement and does all the heavy lifting for you. Our library supports the following major use cases: Load images shipped as BIP images. We recommend this approach in case you can generate the images beforehand. In this case, your users don't need to take any action to enjoy the speed boost. Load regular JPEG or PNG images. Recommended in case you need to load images provided by the user or by external software tools. In this case, you should use our prepared InstallPillow operator so that your users can enjoy the speed boost with a simple click. Notes: Our library will always fall back to bpy.utils.previews if unsupported formats are to be loaded. For this reason, there is no disadvantage in using this library. In the worst case, we will apply the standard mechanism of Blender. .bip is a highly optimized image format, which can be transferred to Blender's internal data structures immediately. It is always blazingly fast, whether Pillow is installed or not.","title":"What is 3DN BIP?"},{"location":"#examples","text":"Download the following sample addons. You can easily install the ZIP files in Blender via the addon preferences tab. Getting Started: t3dn_bip_getting_started.zip Showcase: t3dn_bip_showcase.zip","title":"Examples"},{"location":"#library","text":"The latest release of the library can be downloaded here: t3dn_bip.zip Just extract the zip file and copy the folder into your addon. Take a closer look at the examples given above to learn how to use the library. In case you want to install the library via PyPI , you can use the following command: python -m pip install t3dn-bip","title":"Library"},{"location":"#converter","text":"The converter is provided via PyPI . Use the following command for the installation: python -m pip install t3dn-bip-converter Use the following command to convert images of various formats into the BIP format: python -m t3dn_bip_converter source_file.png destination_file.bip","title":"Converter"},{"location":"#showcases","text":"","title":"Showcases"},{"location":"#show-bip-and-jpg-images-in-a-panel","text":"","title":"Show .bip and .jpg Images in a Panel"},{"location":"#show-bip-and-jpg-images-in-an-enum","text":"","title":"Show .bip and .jpg Images in an Enum"},{"location":"#show-large-bip-and-jpg-hero-images-in-a-panel","text":"","title":"Show large .bip and .jpg Hero Images in a Panel"},{"location":"#show-bip-and-png-images-with-an-alpha-channel","text":"","title":"Show .bip and .png Images with an Alpha Channel"},{"location":"install_pillow/","text":"Install Pillow Our library provides an operator base class offering a fully integrated installation process for Pillow . Inherit t3dn_bip.ops.InstallPillow next to bpy.types.Operator and set a unique bl_idname . Here is an example: import bpy from .t3dn_bip.ops import InstallPillow class MyInstallPillowOperator ( bpy . types . Operator , InstallPillow ): bl_idname = 'my.install_pillow_unique'","title":"Install Pillow"},{"location":"install_pillow/#install-pillow","text":"Our library provides an operator base class offering a fully integrated installation process for Pillow . Inherit t3dn_bip.ops.InstallPillow next to bpy.types.Operator and set a unique bl_idname . Here is an example: import bpy from .t3dn_bip.ops import InstallPillow class MyInstallPillowOperator ( bpy . types . Operator , InstallPillow ): bl_idname = 'my.install_pillow_unique'","title":"Install Pillow"},{"location":"more/","text":"More Features Drop-in replacement for bpy.utils.previews . Provides a highly optimized format for loading previews. Loads arbitrarily sized images. You are not locked with Blender's default of 128x128 . Support for lazy and eager loading of previews. Lazy loading is the recommended method of loading previews as it allows the user interface to remain responsive. Eager loading is possible but not recommended. Some factors are out of the developer's control, such as slow systems without SSDs, growing dynamic lists of images, etc. Supports a fast load of PNG and JPEG previews if the Pillow library is installed. A built-in base class for an operator to install Pillow with a single click. Convenience function load_safe() which can be called repetitively. In case the image is loaded already, it will be returned instead. It allows you to focus on loading your previews and requires less management code on your end. Being a drop-in replacement for bpy.utils.previews , the library maintains support for the standard Blender loading behavior of other file types that are not supported. Warning Our library is powerful, but we recommend using it wisely. Loading images that are unnecessarily large will slow down the user interface and consume memory. We recommend using the library to load reasonably sized images depending on the context. The Idea We developed this library while developing an asset manager for Blender. While working on this project, we realized that the resolution of the images provided by the default bpy.utils.previews was quite limiting in that we had no control as to image quality/resolution. After some sessions and development, this library came to life. We decided that we should not hoard such knowledge but rather share it with the Blender community.","title":"More"},{"location":"more/#more","text":"","title":"More"},{"location":"more/#features","text":"Drop-in replacement for bpy.utils.previews . Provides a highly optimized format for loading previews. Loads arbitrarily sized images. You are not locked with Blender's default of 128x128 . Support for lazy and eager loading of previews. Lazy loading is the recommended method of loading previews as it allows the user interface to remain responsive. Eager loading is possible but not recommended. Some factors are out of the developer's control, such as slow systems without SSDs, growing dynamic lists of images, etc. Supports a fast load of PNG and JPEG previews if the Pillow library is installed. A built-in base class for an operator to install Pillow with a single click. Convenience function load_safe() which can be called repetitively. In case the image is loaded already, it will be returned instead. It allows you to focus on loading your previews and requires less management code on your end. Being a drop-in replacement for bpy.utils.previews , the library maintains support for the standard Blender loading behavior of other file types that are not supported.","title":"Features"},{"location":"more/#warning","text":"Our library is powerful, but we recommend using it wisely. Loading images that are unnecessarily large will slow down the user interface and consume memory. We recommend using the library to load reasonably sized images depending on the context.","title":"Warning"},{"location":"more/#the-idea","text":"We developed this library while developing an asset manager for Blender. While working on this project, we realized that the resolution of the images provided by the default bpy.utils.previews was quite limiting in that we had no control as to image quality/resolution. After some sessions and development, this library came to life. We decided that we should not hoard such knowledge but rather share it with the Blender community.","title":"The Idea"},{"location":"reference/","text":"Reference new(): Description: Create a new preview collection. Arguments: max_size (tuple): The maximum preview dimensions to be held by the collection. Any images that are greater than this size will be resized. The parameter is considered if Pillow is installed. The default value is (128, 128). lazy_load (bool): Set whether to use lazy or eager loading. The default value is True. Returns: An object of type ImagePreviewCollection. remove(): Description: Remove the specified preview collection. Arguments: collection (ImagePreviewCollection): Preview collection to be removed. class ImagePreviewCollection: new(): Description: Generate a new empty preview. Arguments: name (str): The name (unique id) identifying the preview. Returns: An object of type ImagePreview. new_safe(): Description: Return the specified preview if it already exists in the collection. Create it otherwise. Arguments: name (str): The name (unique id) identifying the preview. Returns: An object of type ImagePreview. load(): Description: Load a new preview from the given filepath. Arguments: name (str): The name (unique id) identifying the preview. filepath (str): The file path to load the preview from. filetype ('IMAGE', 'MOVIE', 'BLEND', 'FONT'): The type of the file. Returns: An object of type ImagePreview. load_safe(): Description: Return the specified preview if it already exists in the collection. Load the preview from the given file path otherwise. Arguments: name (str): The name (unique id) identifying the preview. filepath (str): The file path to load the preview from. filetype ('IMAGE', 'MOVIE', 'BLEND', 'FONT'): The type of the file. Returns: An object of type ImagePreview. clear(): Description: Clear all previews. close(): Description: Close the collection and clear all previews. pop(): Description: Remove preview with the given name and return it. Arguments: key (str): The name of the preview to be removed and returned. Returns: An object of type ImagePreview or None. get(): Description: Return preview with the given name, or default. Arguments: key (str): The name of the preview to be returned. default (any): A value to be returned if the specified key does not exist. The default value is None. Returns: An object of type ImagePreview or None. keys(): Description: Return preview names. Returns: An iterable of type str. values(): Description: Return previews. Returns: An iterable of type ImagePreview. items(): Description: Return pairs of name and preview. Returns: An iterable of type (str, ImagePreview).","title":"Reference"},{"location":"reference/#reference","text":"new(): Description: Create a new preview collection. Arguments: max_size (tuple): The maximum preview dimensions to be held by the collection. Any images that are greater than this size will be resized. The parameter is considered if Pillow is installed. The default value is (128, 128). lazy_load (bool): Set whether to use lazy or eager loading. The default value is True. Returns: An object of type ImagePreviewCollection. remove(): Description: Remove the specified preview collection. Arguments: collection (ImagePreviewCollection): Preview collection to be removed. class ImagePreviewCollection: new(): Description: Generate a new empty preview. Arguments: name (str): The name (unique id) identifying the preview. Returns: An object of type ImagePreview. new_safe(): Description: Return the specified preview if it already exists in the collection. Create it otherwise. Arguments: name (str): The name (unique id) identifying the preview. Returns: An object of type ImagePreview. load(): Description: Load a new preview from the given filepath. Arguments: name (str): The name (unique id) identifying the preview. filepath (str): The file path to load the preview from. filetype ('IMAGE', 'MOVIE', 'BLEND', 'FONT'): The type of the file. Returns: An object of type ImagePreview. load_safe(): Description: Return the specified preview if it already exists in the collection. Load the preview from the given file path otherwise. Arguments: name (str): The name (unique id) identifying the preview. filepath (str): The file path to load the preview from. filetype ('IMAGE', 'MOVIE', 'BLEND', 'FONT'): The type of the file. Returns: An object of type ImagePreview. clear(): Description: Clear all previews. close(): Description: Close the collection and clear all previews. pop(): Description: Remove preview with the given name and return it. Arguments: key (str): The name of the preview to be removed and returned. Returns: An object of type ImagePreview or None. get(): Description: Return preview with the given name, or default. Arguments: key (str): The name of the preview to be returned. default (any): A value to be returned if the specified key does not exist. The default value is None. Returns: An object of type ImagePreview or None. keys(): Description: Return preview names. Returns: An iterable of type str. values(): Description: Return previews. Returns: An iterable of type ImagePreview. items(): Description: Return pairs of name and preview. Returns: An iterable of type (str, ImagePreview).","title":"Reference"}]}